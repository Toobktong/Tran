<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบตรวจสอบการส่ง K และ P</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            color: white;
            padding: 30px 0;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
        
        .form-section, .results-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .section-title {
            color: #333;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 3px solid #667eea;
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }
        
        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 25px;
        }
        
        button {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .add-btn {
            background: #4CAF50;
            color: white;
            flex: 1;
        }
        
        .add-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        
        .clear-btn {
            background: #f44336;
            color: white;
        }
        
        .clear-btn:hover {
            background: #da190b;
            transform: translateY(-2px);
        }
        
        .entries-list {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 20px;
        }
        
        .entry-item {
            background: #f8f9fa;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .entry-details {
            flex: 1;
        }
        
        .entry-date {
            font-weight: 600;
            color: #333;
        }
        
        .entry-info {
            color: #666;
            margin: 5px 0;
        }
        
        .delete-btn {
            background: #ff6b6b;
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        .delete-btn:hover {
            background: #ff5252;
        }
        
        .validation-results {
            margin-top: 20px;
        }
        
        .result-item {
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            align-items: center;
        }
        
        .valid {
            background: #d4edda;
            border-left: 4px solid #28a745;
        }
        
        .invalid {
            background: #f8d7da;
            border-left: 4px solid #dc3545;
        }
        
        .result-icon {
            font-size: 1.5rem;
            margin-right: 15px;
        }
        
        .result-content {
            flex: 1;
        }
        
        .result-status {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .valid .result-status {
            color: #155724;
        }
        
        .invalid .result-status {
            color: #721c24;
        }
        
        .result-reason {
            font-size: 0.9rem;
            color: #666;
        }
        
        .status-section {
            background: #e9f7ef;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 2px solid #28a745;
        }
        
        .status-title {
            color: #155724;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background: white;
            border-radius: 5px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .status-label {
            font-weight: 600;
            color: #333;
        }
        
        .status-value {
            color: #007bff;
            font-weight: 600;
        }
        
        .instructions {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-top: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .instructions h3 {
            color: #333;
            margin-bottom: 15px;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
            line-height: 1.6;
        }
        
        .example {
            background: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            font-family: monospace;
        }
        
        .date-group {
            background: #e9ecef;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            font-weight: 600;
        }
        
        .user-management {
            background: #fff3cd;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 2px solid #ffc107;
        }
        
        .user-management h3 {
            color: #856404;
            margin-bottom: 15px;
        }
        
        .user-input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .user-input-group input {
            flex: 1;
        }
        
        .user-list {
            max-height: 150px;
            overflow-y: auto;
            background: white;
            border-radius: 5px;
            padding: 10px;
        }
        
        .user-item {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 3px;
            margin-bottom: 5px;
        }
        
        .remove-user {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 2px 8px;
            cursor: pointer;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ระบบตรวจสอบการส่ง K และ P</h1>
            <p class="subtitle">ตรวจสอบความถูกต้องของการส่ง Key และ Password ระหว่างผู้ส่ง-ผู้รับ</p>
        </header>
        
        <div class="main-content">
            <div class="form-section">
                <h2 class="section-title">จัดการผู้ใช้</h2>
                <div class="user-management">
                    <h3>เพิ่มผู้ใช้ใหม่</h3>
                    <div class="user-input-group">
                        <input type="text" id="newUser" placeholder="ชื่อผู้ใช้ใหม่">
                        <button class="add-btn" onclick="addUser()" style="flex: 0 0 auto; padding: 12px 15px;">เพิ่ม</button>
                    </div>
                    <div class="user-list" id="userList">
                        <!-- รายชื่อผู้ใช้จะแสดงที่นี่ -->
                    </div>
                </div>
                
                <h2 class="section-title">เพิ่มข้อมูลการส่ง</h2>
                <div class="form-group">
                    <label for="date">วันที่:</label>
                    <input type="date" id="date" required>
                </div>
                
                <div class="form-group">
                    <label for="type">ประเภทการส่ง:</label>
                    <select id="type" required>
                        <option value="">เลือกประเภท</option>
                        <option value="K">K (Key)</option>
                        <option value="P">P (Password)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="sender">ชื่อผู้ส่ง:</label>
                    <select id="sender" required>
                        <option value="">เลือกผู้ส่ง</option>
                        <!-- ตัวเลือกผู้ส่งจะถูกเพิ่มโดย JavaScript -->
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="receiver">ชื่อผู้รับ:</label>
                    <select id="receiver" required>
                        <option value="">เลือกผู้รับ</option>
                        <!-- ตัวเลือกผู้รับจะถูกเพิ่มโดย JavaScript -->
                    </select>
                </div>
                
                <div class="button-group">
                    <button class="add-btn" onclick="addEntry()">เพิ่มข้อมูล</button>
                    <button class="clear-btn" onclick="clearEntries()">ล้างข้อมูลทั้งหมด</button>
                </div>
                
                <div class="entries-list" id="entriesList">
                    <!-- Entries will be added here dynamically -->
                </div>
            </div>
            
            <div class="results-section">
                <h2 class="section-title">ผลการตรวจสอบ</h2>
                <div class="status-section">
                    <h3 class="status-title">สถานะปัจจุบัน</h3>
                    <div class="status-item">
                        <span class="status-label">Key (K) อยู่กับ:</span>
                        <span class="status-value" id="keyStatus">-</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">Password (P) อยู่กับ:</span>
                        <span class="status-value" id="passStatus">-</span>
                    </div>
                </div>
                <div class="validation-results" id="validationResults">
                    <p>กรุณาเพิ่มข้อมูลการส่งเพื่อดูผลการตรวจสอบ</p>
                </div>
            </div>
        </div>
        
        <div class="instructions">
            <h3>คำอธิบายระบบ</h3>
            <ul>
                <li>ระบบจะตรวจสอบความถูกต้องของการส่ง K และ P ตามลำดับวันที่</li>
                <li>ผู้รับจะสามารถส่งต่อ "K" หรือ "P" ให้คนอื่นได้ ก็ต่อเมื่อเขาได้รับสิ่งนั้นมาแล้วก่อนหน้า</li>
                <li>หากมีการส่งโดยที่ผู้ส่งไม่เคยได้รับมาก่อน จะถือว่า "ไม่ถูกต้อง"</li>
                <li><strong>ข้อแก้ไข: รายการแรกของแต่ละประเภท (K หรือ P) ถือว่าถูกต้องเสมอ</strong></li>
                <li><strong>ข้อแก้ไขใหม่: ข้อมูลในวันที่เดียวกันจะถูกวิเคราะห์ร่วมกันก่อน แล้วจึงวิเคราะห์ข้อมูลในวันถัดไป</strong></li>
            </ul>
            
            <h3>ตัวอย่างกรณีที่ถูกต้อง:</h3>
            <div class="example">
                01/07/2025 - A ส่ง K ให้ B (ถูกต้อง - รายการแรก)<br>
                01/07/2025 - B ส่ง K ให้ C (ถูกต้อง - B มี K แล้ว)<br>
                02/07/2025 - C ส่ง K ให้ A (ถูกต้อง - C มี K แล้ว)<br>
                02/07/2025 - A ส่ง K ให้ B (ถูกต้อง - A มี K แล้ว)
            </div>
            
            <h3>ตัวอย่างกรณีที่ไม่ถูกต้อง:</h3>
            <div class="example">
                01/07/2025 - A ส่ง K ให้ B (ถูกต้อง - รายการแรก)<br>
                01/07/2025 - A ส่ง K ให้ C (ไม่ถูกต้อง - A ไม่มี K แล้ว)<br>
                02/07/2025 - B ส่ง K ให้ A (ถูกต้อง - B มี K อยู่)<br>
                02/07/2025 - C ส่ง K ให้ B (ไม่ถูกต้อง - C ไม่มี K แล้ว)
            </div>
        </div>
    </div>

    <script>
        let entries = [];
        let users = ['A', 'B', 'C']; // รายชื่อผู้ใช้เริ่มต้น
        
        // ฟังก์ชันเพิ่มผู้ใช้ใหม่
        function addUser() {
            const newUser = document.getElementById('newUser').value.trim();
            
            if (!newUser) {
                alert('กรุณากรอกชื่อผู้ใช้');
                return;
            }
            
            if (users.includes(newUser)) {
                alert('ชื่อผู้ใช้นี้มีอยู่แล้ว');
                return;
            }
            
            users.push(newUser);
            updateUsersList();
            updateSenderReceiverDropdowns();
            document.getElementById('newUser').value = '';
        }
        
        // ฟังก์ชันลบผู้ใช้
        function removeUser(user) {
            if (users.length <= 1) {
                alert('ต้องมีผู้ใช้อย่างน้อย 1 คน');
                return;
            }
            
            users = users.filter(u => u !== user);
            updateUsersList();
            updateSenderReceiverDropdowns();
        }
        
        // ฟังก์ชันอัปเดตรายชื่อผู้ใช้
        function updateUsersList() {
            const userList = document.getElementById('userList');
            userList.innerHTML = '';
            
            users.forEach(user => {
                const userItem = document.createElement('div');
                userItem.className = 'user-item';
                userItem.innerHTML = `
                    <span>${user}</span>
                    <button class="remove-user" onclick="removeUser('${user}')">ลบ</button>
                `;
                userList.appendChild(userItem);
            });
        }
        
        // ฟังก์ชันอัปเดต dropdown ผู้ส่งและผู้รับ
        function updateSenderReceiverDropdowns() {
            const senderSelect = document.getElementById('sender');
            const receiverSelect = document.getElementById('receiver');
            
            // เก็บค่าเดิมไว้
            const oldSender = senderSelect.value;
            const oldReceiver = receiverSelect.value;
            
            // ล้าง dropdown
            senderSelect.innerHTML = '<option value="">เลือกผู้ส่ง</option>';
            receiverSelect.innerHTML = '<option value="">เลือกผู้รับ</option>';
            
            // เพิ่มตัวเลือกใหม่
            users.forEach(user => {
                const senderOption = document.createElement('option');
                senderOption.value = user;
                senderOption.textContent = user;
                senderSelect.appendChild(senderOption);
                
                const receiverOption = document.createElement('option');
                receiverOption.value = user;
                receiverOption.textContent = user;
                receiverSelect.appendChild(receiverOption);
            });
            
            // คืนค่าเดิมหากยังมีอยู่
            if (users.includes(oldSender)) senderSelect.value = oldSender;
            if (users.includes(oldReceiver)) receiverSelect.value = oldReceiver;
        }
        
        // ฟังก์ชันเพิ่มข้อมูลการส่ง
        function addEntry() {
            const date = document.getElementById('date').value;
            const type = document.getElementById('type').value;
            const sender = document.getElementById('sender').value;
            const receiver = document.getElementById('receiver').value;
            
            if (!date || !type || !sender || !receiver) {
                alert('กรุณากรอกข้อมูลให้ครบทุกช่อง');
                return;
            }
            
            if (sender === receiver) {
                alert('ชื่อผู้ส่งและผู้รับต้องไม่ซ้ำกัน');
                return;
            }
            
            const entry = {
                id: Date.now(),
                date: new Date(date),
                type: type,
                sender: sender,
                receiver: receiver
            };
            
            entries.push(entry);
            entries.sort((a, b) => a.date - b.date);
            
            displayEntries();
            validateEntries();
            clearForm();
        }
        
        // ฟังก์ชันแสดงรายการข้อมูล
        function displayEntries() {
            const entriesList = document.getElementById('entriesList');
            entriesList.innerHTML = '';
            
            if (entries.length === 0) {
                entriesList.innerHTML = '<p>ยังไม่มีข้อมูลการส่ง</p>';
                return;
            }
            
            entries.forEach(entry => {
                const dateString = entry.date.toLocaleDateString('th-TH');
                const entryElement = document.createElement('div');
                entryElement.className = 'entry-item';
                entryElement.innerHTML = `
                    <div class="entry-details">
                        <div class="entry-date">${dateString}</div>
                        <div class="entry-info">${entry.sender} ส่ง ${entry.type} ให้ ${entry.receiver}</div>
                    </div>
                    <button class="delete-btn" onclick="deleteEntry(${entry.id})">ลบ</button>
                `;
                entriesList.appendChild(entryElement);
            });
        }
        
        // ฟังก์ชันลบรายการ
        function deleteEntry(id) {
            entries = entries.filter(entry => entry.id !== id);
            displayEntries();
            validateEntries();
        }
        
        // ฟังก์ชันล้างข้อมูลทั้งหมด
        function clearEntries() {
            if (confirm('คุณแน่ใจหรือไม่ว่าต้องการล้างข้อมูลทั้งหมด?')) {
                entries = [];
                displayEntries();
                document.getElementById('validationResults').innerHTML = '<p>กรุณาเพิ่มข้อมูลการส่งเพื่อดูผลการตรวจสอบ</p>';
                document.getElementById('keyStatus').textContent = '-';
                document.getElementById('passStatus').textContent = '-';
            }
        }
        
        // ฟังก์ชันล้างฟอร์ม
        function clearForm() {
            document.getElementById('date').value = '';
            document.getElementById('type').value = '';
            document.getElementById('sender').value = '';
            document.getElementById('receiver').value = '';
        }
        
        // ฟังก์ชันตรวจสอบความถูกต้อง
        function validateEntries() {
            const resultsContainer = document.getElementById('validationResults');
            const keyStatusElement = document.getElementById('keyStatus');
            const passStatusElement = document.getElementById('passStatus');
            
            if (entries.length === 0) {
                resultsContainer.innerHTML = '<p>กรุณาเพิ่มข้อมูลการส่งเพื่อดูผลการตรวจสอบ</p>';
                keyStatusElement.textContent = '-';
                passStatusElement.textContent = '-';
                return;
            }
            
            // จัดกลุ่มข้อมูลตามวันที่
            const groupedEntries = {};
            entries.forEach(entry => {
                const dateKey = entry.date.toISOString().split('T')[0];
                if (!groupedEntries[dateKey]) {
                    groupedEntries[dateKey] = [];
                }
                groupedEntries[dateKey].push(entry);
            });
            
            // จัดเรียงกลุ่มตามวันที่
            const sortedDates = Object.keys(groupedEntries).sort();
            
            // ติดตามสถานะการเป็นเจ้าของ K และ P ของแต่ละบุคคล
            let ownership = {
                'K': {}, // ใครเป็นเจ้าของ K บ้าง
                'P': {}  // ใครเป็นเจ้าของ P บ้าง
            };
            
            // ติดตามว่าแต่ละประเภทมีรายการแรกแล้วหรือยัง
            const isFirstEntry = {
                'K': true,
                'P': true
            };
            
            // ติดตามผู้ถือครองล่าสุด
            let currentHolders = {
                'K': '-',
                'P': '-'
            };
            
            let resultsHTML = '';
            
            // วิเคราะห์แต่ละกลุ่มวันที่
            sortedDates.forEach(dateKey => {
                const dateEntries = groupedEntries[dateKey];
                const dateString = new Date(dateKey).toLocaleDateString('th-TH');
                
                // แสดงกลุ่มวันที่
                resultsHTML += `<div class="date-group">วันที่: ${dateString}</div>`;
                
                // สำหรับแต่ละวัน ต้องวิเคราะห์รายการทั้งหมดในวันนั้นพร้อมกัน
                // สร้างสำเนาของ ownership สำหรับวิเคราะห์ในวันนี้
                let tempOwnership = JSON.parse(JSON.stringify(ownership));
                let dayResults = [];
                let processedEntries = [];
                
                // วนลูปจนกว่าจะประมวลผลรายการทั้งหมดในวันนี้
                while (processedEntries.length < dateEntries.length) {
                    let progressMade = false;
                    
                    for (let i = 0; i < dateEntries.length; i++) {
                        if (processedEntries.includes(i)) continue; // ข้ามรายการที่ประมวลผลแล้ว
                        
                        const entry = dateEntries[i];
                        const entryIndex = entries.indexOf(entry);
                        
                        // ตรวจสอบว่านี่คือรายการแรกของประเภทนี้หรือไม่ (โดยรวมทั้งหมด)
                        if (isFirstEntry[entry.type]) {
                            // รายการแรกของแต่ละประเภทถือว่าถูกต้องเสมอ
                            dayResults.push({
                                entry: entry,
                                valid: true,
                                reason: `รายการแรกของ ${entry.type} ถือว่าถูกต้องเสมอ`
                            });
                            
                            // โอนกรรมสิทธิ์ให้ผู้รับ
                            tempOwnership[entry.type][entry.receiver] = true;
                            isFirstEntry[entry.type] = false;
                            currentHolders[entry.type] = entry.receiver;
                            processedEntries.push(i);
                            progressMade = true;
                        } else if (tempOwnership[entry.type][entry.sender]) {
                            // ไม่ใช่รายการแรก แต่ผู้ส่งมีของที่จะส่ง
                            dayResults.push({
                                entry: entry,
                                valid: true,
                                reason: null
                            });
                            
                            // โอนกรรมสิทธิ์จากผู้ส่งให้ผู้รับ
                            tempOwnership[entry.type][entry.receiver] = true;
                            delete tempOwnership[entry.type][entry.sender];
                            currentHolders[entry.type] = entry.receiver;
                            processedEntries.push(i);
                            progressMade = true;
                        }
                    }
                    
                    // หากไม่มีความคืบหน้าในรอบนี้ แสดงว่ารายการที่เหลือไม่สามารถประมวลผลได้
                    if (!progressMade) {
                        for (let i = 0; i < dateEntries.length; i++) {
                            if (!processedEntries.includes(i)) {
                                const entry = dateEntries[i];
                                dayResults.push({
                                    entry: entry,
                                    valid: false,
                                    reason: `ผู้ส่ง ${entry.sender} ยังไม่เคยได้รับ ${entry.type} มาก่อน`
                                });
                                processedEntries.push(i);
                            }
                        }
                    }
                }
                
                // แสดงผลลัพธ์ของวันนี้
                dayResults.forEach(result => {
                    const entry = result.entry;
                    const entryDateString = entry.date.toLocaleDateString('th-TH');
                    const description = `${entryDateString} - ${entry.sender} ส่ง ${entry.type} ให้ ${entry.receiver}`;
                    
                    if (result.valid) {
                        resultsHTML += `
                            <div class="result-item valid">
                                <div class="result-icon">✓</div>
                                <div class="result-content">
                                    <div class="result-status">ถูกต้อง</div>
                                    <div>${description}</div>
                                    ${result.reason ? `<div class="result-reason">เหตุผล: ${result.reason}</div>` : ''}
                                </div>
                            </div>
                        `;
                    } else {
                        resultsHTML += `
                            <div class="result-item invalid">
                                <div class="result-icon">✗</div>
                                <div class="result-content">
                                    <div class="result-status">ไม่ถูกต้อง</div>
                                    <div>${description}</div>
                                    <div class="result-reason">เหตุผล: ${result.reason}</div>
                                </div>
                            </div>
                        `;
                    }
                });
                
                // อัปเดต ownership หลังจากวิเคราะห์วันนี้เสร็จ
                ownership = tempOwnership;
            });
            
            resultsContainer.innerHTML = resultsHTML;
            
            // อัปเดตสถานะปัจจุบัน
            keyStatusElement.textContent = currentHolders.K;
            passStatusElement.textContent = currentHolders.P;
        }
        
        // ตั้งค่าเริ่มต้นเมื่อหน้าเว็บโหลด
        window.onload = function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            updateUsersList();
            updateSenderReceiverDropdowns();
        };
    </script>
</body>
</html>
